name: Go2

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Build
        run: |
          go build -o file-encryptor cmd/file-encryptor/main.go
          # Verify the binary was created
          ls -l file-encryptor
          # Make it executable
          chmod +x file-encryptor

      - name: Prepare Test Files
        run: |
          # Create a text file with specific content
          echo "This is a test file with special characters: !@#$%^&*()" > test.txt

          # Create a binary file
          dd if=/dev/urandom of=binary.dat bs=1024 count=100

          # Create a JSON file
          echo '{"test": "data", "number": 123}' > data.json

          echo "Created test files:"
          ls -l test.txt binary.dat data.json
          echo "test.txt content:"
          cat test.txt
          echo "data.json content:"
          cat data.json
          echo "binary.dat sha256sum:"
          sha256sum binary.dat

      - name: Test RSA Key Generation
        run: |
          pwd
          ls -la
          ./file-encryptor --generate-keys --key-name test_key
          if [ ! -f test_key_private_*.key ] || [ ! -f test_key_public_*.pub ]; then
            echo "Failed to generate key pair"
            exit 1
          fi
          echo "Generated RSA key pair successfully"
          ls -l test_key_*

      - name: Test RSA Encryption and Decryption - Text File
        run: |
          # Store original content
          ORIGINAL_CONTENT=$(cat test.txt)

          # Encrypt
          ./file-encryptor -e -f test.txt -k test_key_public_*.pub
          if [ ! -f test.txt.enc ]; then
            echo "Encryption failed - no output file"
            exit 1
          fi

          # Decrypt
          ./file-encryptor -d -f test.txt.enc -k test_key_private_*.key

          # Verify content
          DECRYPTED_CONTENT=$(cat test.txt.dec)
          if [ "$ORIGINAL_CONTENT" != "$DECRYPTED_CONTENT" ]; then
            echo "Content mismatch after RSA encryption/decryption"
            echo "Original: $ORIGINAL_CONTENT"
            echo "Decrypted: $DECRYPTED_CONTENT"
            exit 1
          fi
          echo "RSA encryption/decryption for text file verified successfully"

      - name: Test RSA Encryption and Decryption - Binary File
        run: |
          # Store original hash
          ORIGINAL_HASH=$(sha256sum binary.dat | awk '{print $1}')

          # Encrypt
          ./file-encryptor -e -f binary.dat -k test_key_public_*.pub
          if [ ! -f binary.dat.enc ]; then
            echo "Encryption failed - no output file"
            exit 1
          fi

          # Decrypt
          ./file-encryptor -d -f binary.dat.enc -k test_key_private_*.key

          # Verify hash
          DECRYPTED_HASH=$(sha256sum binary.dat.dec | awk '{print $1}')
          if [ "$ORIGINAL_HASH" != "$DECRYPTED_HASH" ]; then
            echo "Hash mismatch after RSA encryption/decryption"
            echo "Original hash: $ORIGINAL_HASH"
            echo "Decrypted hash: $DECRYPTED_HASH"
            exit 1
          fi
          echo "RSA encryption/decryption for binary file verified successfully"

      - name: Test Password Encryption and Decryption - JSON File
        run: |
          # Store original content
          ORIGINAL_CONTENT=$(cat data.json)

          # Encrypt
          ./file-encryptor -e -f data.json -p "TestPassword123!"
          if [ ! -f data.json.enc ]; then
            echo "Encryption failed - no output file"
            exit 1
          fi

          # Decrypt
          ./file-encryptor -d -f data.json.enc -p "TestPassword123!"

          # Verify content
          DECRYPTED_CONTENT=$(cat data.json.dec)
          if [ "$ORIGINAL_CONTENT" != "$DECRYPTED_CONTENT" ]; then
            echo "Content mismatch after password encryption/decryption"
            echo "Original: $ORIGINAL_CONTENT"
            echo "Decrypted: $DECRYPTED_CONTENT"
            exit 1
          fi
          echo "Password encryption/decryption for JSON file verified successfully"

      - name: Test Generate-and-Encrypt with Decryption
        run: |
          # Store original content
          ORIGINAL_CONTENT=$(cat test.txt)

          # Generate keys and encrypt in one step
          ./file-encryptor --generate-keys --encrypt -f test.txt

          # Get the latest generated private key
          PRIVATE_KEY=$(ls -t key_private_*.key | head -1)

          # Decrypt using generated key
          ./file-encryptor -d -f test.txt.enc -k "$PRIVATE_KEY"

          # Verify content
          DECRYPTED_CONTENT=$(cat test.txt.dec)
          if [ "$ORIGINAL_CONTENT" != "$DECRYPTED_CONTENT" ]; then
            echo "Content mismatch after generate-and-encrypt"
            echo "Original: $ORIGINAL_CONTENT"
            echo "Decrypted: $DECRYPTED_CONTENT"
            exit 1
          fi
          echo "Generate-and-encrypt with decryption verified successfully"

      - name: Test Wrong Password Scenario
        run: |
          # Attempt to decrypt with wrong password
          if ./file-encryptor -d -f data.json.enc -p "WrongPassword123!"; then
            echo "Decryption with wrong password succeeded when it should fail"
            exit 1
          fi
          echo "Wrong password test passed successfully"

      - name: Test File Extension Preservation
        run: |
          # Create test files with different extensions
          echo "Test content" > test.doc
          echo "Test content" > test.pdf

          # Encrypt files
          ./file-encryptor -e -f test.doc -p "TestPassword123!"
          ./file-encryptor -e -f test.pdf -p "TestPassword123!"

          # Decrypt files
          ./file-encryptor -d -f test.doc.enc -p "TestPassword123!"
          ./file-encryptor -d -f test.pdf.enc -p "TestPassword123!"

          # Verify extensions
          if [ ! -f test.doc.dec ]; then
            echo "Failed to preserve .doc extension"
            exit 1
          fi
          if [ ! -f test.pdf.dec ]; then
            echo "Failed to preserve .pdf extension"
            exit 1
          fi
          echo "File extension preservation test passed successfully"

      - name: Cleanup
        run: |
          rm -f test.txt test.txt.enc test.txt.dec
          rm -f binary.dat binary.dat.enc binary.dat.dec
          rm -f data.json data.json.enc data.json.dec
          rm -f test.doc* test.pdf*
          rm -f test_key_* key_*
          echo "Cleanup completed"
